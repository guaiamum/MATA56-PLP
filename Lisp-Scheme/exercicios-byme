(define (maior-de-idade idade) 
  (cond 
   ((>= idade 18) #t)
   (else #f)))
; testes
(teste #t (maior-de-idade 25))
(teste #f (maior-de-idade 15))
(teste #t (maior-de-idade 18))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (imc peso altura) 
  (/ peso (* altura altura))
  )
; testes
(teste 23.148148148148145 (imc 75 1.80))
(teste 30.864197530864196 (imc 100 1.80))
(teste 15.495867768595039 (imc 75 2.20))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (imc peso altura) 
  (/ peso (* altura altura))
  )

(define (obesidade peso altura)
  (cond
   ((< (imc peso altura) 20) 'abaixoDoPeso)
   ((> (imc peso altura) 30) 'obeso)
   (else 'neutro)
   ))

; testes
(teste 'abaixoDoPeso (obesidade 40 1.80))
(teste 'neutro (obesidade 75 1.80))
(teste 'obeso (obesidade 100 1.80))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (fib n) 
  (cond 
   ((= n 1) 1)
   ((= n 2) 1)
   (else 
    (+ (fib (- n 1)) (fib (- n 2))))))
; testes
(teste 1 (fib 1))
(teste 1 (fib 2))
(teste 2 (fib 3))
(teste 3 (fib 4))
(teste 5 (fib 5))
(teste 8 (fib 6))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (compr lista)
  (cond
		((null? lista) 0)
		(else 
   		(+ 1 (compr (cdr lista))))))
; testes
(teste 0 (compr '()))
(teste 1 (compr '(1)))
(teste 3 (compr '(1 2 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(teste #f (member 0 '()))
(teste '(1) (member 1 '(0 1)))
(teste #f (member 4 '(1 2 3)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (is-set lista)
  (cond
   ((null? lista) #t)
   ((member (car lista) (cdr lista)) #f)
   (else 
    (is-set (cdr lista)))))
; testes
(teste #t (is-set '()))
(teste #t (is-set '(1)))
(teste #t (is-set '(1 2 3)))
(teste #f (is-set '(1 1 2)))
(teste #f (is-set '(1 2 1)))
(teste #f (is-set '(1 2 3 2 5)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (freq x lista)
  (cond 
   ((null? lista) 0)
   ((equal? x (car lista)) (+ 1 (freq x (cdr lista))))
   (else
    (+ 0 (freq x (cdr lista))))))
    
; testes
(teste 1 (freq 2 '(1 2 3)))
(teste 2 (freq 1 '(1 1 2)))
(teste 2 (freq 1 '(1 2 1)))
(teste 0 (freq 3 '(1 2 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (qtd-pares lista)
  (cond 
   ((null? lista) 0)
   ((even? (car lista)) (+ 1 (qtd-pares (cdr lista))))
   (else
    (+ 0 (qtd-pares (cdr lista))))))
    
; testes
(teste 1 (qtd-pares '(1 2 3)))
(teste 2 (qtd-pares '(2 1 2)))
(teste 2 (qtd-pares '(1 2 2)))
(teste 0 (qtd-pares '(1 3 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (dobra-tudo lista)
  (cond
    ((null? lista) '())
    (else 
     (cons (* 2 (car lista)) (dobra-tudo (cdr lista)))
     )))

; testes
(teste '(2 4 6) (dobra-tudo '(1 2 3)))
(teste '(4 2 4) (dobra-tudo '(2 1 2)))
(teste '(2 4 4) (dobra-tudo '(1 2 2)))
(teste '(2) (dobra-tudo '(1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


